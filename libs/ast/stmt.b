#!-- This file is autogenerated by scripts/ast.b
/**
 * base Stmt class
 */
class Stmt {
}

/**
 * Echo Stmt representation
 */
class EchoStmt < Stmt {

  /**
   * @constructor
   */
  EchoStmt(value) {
    self.value = value
  }

  @to_json() {
    return {
      type: 'EchoStmt',
      value: self.value,
    }
  }
}

/**
 * Expr Stmt representation
 */
class ExprStmt < Stmt {

  /**
   * @constructor
   */
  ExprStmt(expr) {
    self.expr = expr
  }

  @to_json() {
    return {
      type: 'ExprStmt',
      expr: self.expr,
    }
  }
}

/**
 * If Stmt representation
 */
class IfStmt < Stmt {

  /**
   * @constructor
   */
  IfStmt(condition, truth, falsy) {
    self.condition = condition
    self.truth = truth
    self.falsy = falsy
  }

  @to_json() {
    return {
      type: 'IfStmt',
      condition: self.condition,
      truth: self.truth,
      falsy: self.falsy,
    }
  }
}

/**
 * Iter Stmt representation
 */
class IterStmt < Stmt {

  /**
   * @constructor
   */
  IterStmt(declaration, condition, iterator, body) {
    self.declaration = declaration
    self.condition = condition
    self.iterator = iterator
    self.body = body
  }

  @to_json() {
    return {
      type: 'IterStmt',
      declaration: self.declaration,
      condition: self.condition,
      iterator: self.iterator,
      body: self.body,
    }
  }
}

/**
 * While Stmt representation
 */
class WhileStmt < Stmt {

  /**
   * @constructor
   */
  WhileStmt(condition, body) {
    self.condition = condition
    self.body = body
  }

  @to_json() {
    return {
      type: 'WhileStmt',
      condition: self.condition,
      body: self.body,
    }
  }
}

/**
 * For Stmt representation
 */
class ForStmt < Stmt {

  /**
   * @constructor
   */
  ForStmt(vars, iterable, body) {
    self.vars = vars
    self.iterable = iterable
    self.body = body
  }

  @to_json() {
    return {
      type: 'ForStmt',
      vars: self.vars,
      iterable: self.iterable,
      body: self.body,
    }
  }
}

/**
 * Continue Stmt representation
 */
class ContinueStmt < Stmt {

  @to_json() {
    return {
      type: 'ContinueStmt',
     }
  }
}

/**
 * Break Stmt representation
 */
class BreakStmt < Stmt {

  @to_json() {
    return {
      type: 'BreakStmt',
     }
  }
}

/**
 * Die Stmt representation
 */
class DieStmt < Stmt {

  /**
   * @constructor
   */
  DieStmt(exception) {
    self.exception = exception
  }

  @to_json() {
    return {
      type: 'DieStmt',
      exception: self.exception,
    }
  }
}

/**
 * Return Stmt representation
 */
class ReturnStmt < Stmt {

  /**
   * @constructor
   */
  ReturnStmt(value) {
    self.value = value
  }

  @to_json() {
    return {
      type: 'ReturnStmt',
      value: self.value,
    }
  }
}

/**
 * Assert Stmt representation
 */
class AssertStmt < Stmt {

  /**
   * @constructor
   */
  AssertStmt(expr, message) {
    self.expr = expr
    self.message = message
  }

  @to_json() {
    return {
      type: 'AssertStmt',
      expr: self.expr,
      message: self.message,
    }
  }
}

/**
 * Using Stmt representation
 */
class UsingStmt < Stmt {

  /**
   * @constructor
   */
  UsingStmt(expr, cases, default_case) {
    self.expr = expr
    self.cases = cases
    self.default_case = default_case
  }

  @to_json() {
    return {
      type: 'UsingStmt',
      expr: self.expr,
      cases: self.cases,
      default_case: self.default_case,
    }
  }
}

/**
 * Import Stmt representation
 */
class ImportStmt < Stmt {

  /**
   * @constructor
   */
  ImportStmt(path, elements) {
    self.path = path
    self.elements = elements
  }

  @to_json() {
    return {
      type: 'ImportStmt',
      path: self.path,
      elements: self.elements,
    }
  }
}

/**
 * Catch Stmt representation
 */
class CatchStmt < Stmt {

  /**
   * @constructor
   */
  CatchStmt(type, var_name, body) {
    self.type = type
    self.var_name = var_name
    self.body = body
  }

  @to_json() {
    return {
      type: 'CatchStmt',
      type: self.type,
      var_name: self.var_name,
      body: self.body,
    }
  }
}

/**
 * Finally Stmt representation
 */
class FinallyStmt < Stmt {

  /**
   * @constructor
   */
  FinallyStmt(body) {
    self.body = body
  }

  @to_json() {
    return {
      type: 'FinallyStmt',
      body: self.body,
    }
  }
}

/**
 * Try Stmt representation
 */
class TryStmt < Stmt {

  /**
   * @constructor
   */
  TryStmt(body, catch_stmt, finally_stmt) {
    self.body = body
    self.catch_stmt = catch_stmt
    self.finally_stmt = finally_stmt
  }

  @to_json() {
    return {
      type: 'TryStmt',
      body: self.body,
      catch_stmt: self.catch_stmt,
      finally_stmt: self.finally_stmt,
    }
  }
}

/**
 * Comment Stmt representation
 */
class CommentStmt < Stmt {

  /**
   * @constructor
   */
  CommentStmt(data) {
    self.data = data
  }

  @to_json() {
    return {
      type: 'CommentStmt',
      data: self.data,
    }
  }
}

/**
 * Block Stmt representation
 */
class BlockStmt < Stmt {

  /**
   * @constructor
   */
  BlockStmt(body) {
    self.body = body
  }

  @to_json() {
    return {
      type: 'BlockStmt',
      body: self.body,
    }
  }
}

/**
 * Assign Stmt representation
 */
class AssignStmt < Stmt {

  /**
   * @constructor
   */
  AssignStmt(expr, type, value) {
    self.expr = expr
    self.type = type
    self.value = value
  }

  @to_json() {
    return {
      type: 'AssignStmt',
      expr: self.expr,
      type: self.type,
      value: self.value,
    }
  }
}

